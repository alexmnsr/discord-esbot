import nextcord
from nextcord import SelectOption

from utils.neccessary import user_visual, send_embed, user_text


class RoleInfo:
    def __init__(self, role_names, tag, rangs):
        self.role_names = role_names
        self.tag = tag
        self.rangs = rangs

    def find(self, guild_roles):
        for role in guild_roles:
            if role.name.lower() in [r.lower() for r in self.role_names]:
                return role
        return None

    def rang_name(self, num):
        return self.rangs[num - 1]


role_info = {
    '–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ': RoleInfo(['–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ü—Ä–∞-–≤–æ'], '–ü—Ä–∞-–≤–æ | {}',
                              ["–í–æ–¥–∏—Ç–µ–ª—å", "–û—Ö—Ä–∞–Ω–Ω–∏–∫", "–ù–∞—á.–û—Ö—Ä–∞–Ω—ã", "–°–µ–∫—Ä–µ—Ç–∞—Ä—å", "–°—Ç–∞—Ä—à–∏–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å", "–õ–∏—Ü–µ–Ω–∑—ë—Ä",
                               "–ê–¥–≤–æ–∫–∞—Ç", "–î–µ–ø—É—Ç–∞—Ç"]),

    '–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –û–±–æ—Ä–æ–Ω—ã': RoleInfo(['–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –û–±–æ—Ä–æ–Ω—ã', '–ú–û'], '–ú–û | {}',
                                     ["–†—è–¥–æ–≤–æ–π", "–ï—Ñ—Ä–µ–π—Ç–æ—Ä", "–°–µ—Ä–∂–∞–Ω—Ç", "–ü—Ä–∞–ø–æ—Ä—â–∏–∫", "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", "–ö–∞–ø–∏—Ç–∞–Ω", "–ú–∞–π–æ—Ä",
                                      "–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫"]),
    '–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è': RoleInfo(['–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', '–ú–ó'], '–ú–ó | {}',
                                             ["–ò–Ω—Ç–µ—Ä–Ω", "–§–µ–ª—å–¥—à–µ—Ä", "–£—á–∞—Å—Ç–∫–æ–≤—ã–π –≤—Ä–∞—á", "–¢–µ—Ä–∞–ø–µ–≤—Ç", "–ü—Ä–æ–∫—Ç–æ–ª–æ–≥",
                                              "–ù–∞—Ä–∫–æ–ª–æ–≥", "–•–∏—Ä—É—Ä–≥", "–ó–∞–≤–µ–¥—É—é—â–∏–π –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º"]),
    '–¢–µ–ª–µ-–†–∞–¥–∏–æ –ö–æ–º–ø–∞–Ω–∏—è ¬´–†–∏—Ç–º¬ª': RoleInfo(['–¢–µ–ª–µ-–†–∞–¥–∏–æ –ö–æ–º–ø–∞–Ω–∏—è ¬´–†–∏—Ç–º¬ª', '–¢–†–ö'], '–¢–†–ö | {}',
                                           ["–°—Ç–∞–∂—ë—Ä", "–°–≤–µ—Ç–æ—Ç–µ—Ö–Ω–∏–∫", "–ú–æ–Ω—Ç–∞–∂—ë—Ä", "–û–ø–µ—Ä–∞—Ç–æ—Ä", "–î–∏–∑–∞–π–Ω–µ—Ä", "–†–µ–ø–æ—Ä—Ç–µ—Ä",
                                            "–í–µ–¥—É—â–∏–π", "–†–µ–∂–∏—Å—Å—ë—Ä"]),
    '–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –î–µ–ª': RoleInfo(['–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –î–µ–ª', '–ú–í–î'], '–ú–í–î | {}',
                                            ["–†—è–¥–æ–≤–æ–π", "–°–µ—Ä–∂–∞–Ω—Ç", "–°—Ç–∞—Ä—à–∏–Ω–∞", "–ü—Ä–∞–ø–æ—Ä—â–∏–∫", "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", "–ö–∞–ø–∏—Ç–∞–Ω",
                                             "–ú–∞–π–æ—Ä", "–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫"]),
    '–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –°–ª—É–∂–±–∞ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ù–∞–∫–∞–∑–∞–Ω–∏–π': RoleInfo(['–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –°–ª—É–∂–±–∞ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ù–∞–∫–∞–∑–∞–Ω–∏–π', '–§–°–ò–ù'],
                                                        '–§–°–ò–ù | {}',
                                                        ["–û—Ö—Ä–∞–Ω–Ω–∏–∫", "–ö–æ–Ω–≤–æ–∏—Ä", "–ù–∞–¥–∑–∏—Ä–∞—Ç–µ–ª—å", "–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä"])
}

reasons_dict = {
    "/c 60": ('‚è±Ô∏è', "–ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –Ω–µ –≤–∏–¥–Ω–æ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."),
    "12 —á–∞—Å–æ–≤": ('‚åõ', "–°–∫—Ä–∏–Ω—à–æ—Ç—É –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤."),
    "–ù–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞": ('üî¢', "–ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –Ω–µ –≤–∏–¥–Ω–æ –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞."),
    "–ù–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏": ('üëì', "–ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –Ω–µ –≤–∏–¥–Ω–æ –¥–æ–∫-–≤ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."),
    "–ù–∏–∫–Ω–µ–π–º": ('üìõ', "–ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º."),
    "–ù–µ–≤–∞–ª–∏–¥": ('üö´', "–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å –∏–≥—Ä—ã –ª–∏–±–æ –Ω–µ –≤–∏–¥–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É / —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ.")
}


def find_role(role_name):
    for key, info in role_info.items():
        if role_name in info.role_names:
            return info
    return None


class ReviewView(nextcord.ui.View):
    def __init__(self, roles_handler):
        super().__init__(timeout=None)
        self.roles_handler = roles_handler

    async def reject_process(self, interaction, value):
        await interaction.response.defer()

        reason = reasons_dict.get(value, value)
        if not isinstance(reason, tuple):
            reason = ('', reason)

        emoji, reason = reason

        embed = interaction.message.embeds[0]
        embed.colour = nextcord.Colour.dark_red()
        embed.title = "üìï –û—Ç–∫–∞–∑–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–æ–ª—å"
        embed.add_field(name=f'–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ {emoji}', value=reason, inline=False)

        request = await RoleRequest.from_message(interaction.message)
        user, guild = RoleRequest.parse_info(interaction.message)
        await interaction.edit_original_message(embed=embed, view=None)
        if request:
            await request.reject(emoji, reason, user_text(interaction.user))
        await self.roles_handler.remove_request(user, guild, interaction.user.id, False)

    @nextcord.ui.string_select(
        placeholder="–û—Ç–∫–∞–∑–∞—Ç—å –∑–∞...", custom_id="role_request:reject", options=[
                                                                                   SelectOption(label=key,
                                                                                                description=value[1],
                                                                                                emoji=value[0],
                                                                                                value=key) for
                                                                                   key, value in reasons_dict.items()
                                                                               ] + [SelectOption(label="–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞",
                                                                                                 value="own", emoji='‚ùî',
                                                                                                 description="–û—Ç–∫—Ä–æ–µ—Ç –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ –≤–∞—à–µ–π –ø—Ä–∏—á–∏–Ω—ã.")]
    )
    async def reject(self, select: nextcord.ui.Select, interaction: nextcord.Interaction):
        moderator_id = nextcord.utils.parse_raw_mentions(interaction.message.embeds[0].fields[-1].value)[0]
        if moderator_id != interaction.user.id:
            return await interaction.send("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∑–∞–ø—Ä–æ—Å–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.", ephemeral=True)
        value = select.values[0]
        if value != 'own':
            self.stop()
            await self.reject_process(interaction, value)
        else:
            modal = nextcord.ui.Modal("–û—Ç–∫–∞–∑ —Ä–æ–ª–∏")
            reason = nextcord.ui.TextInput("–ü—Ä–∏—á–∏–Ω–∞")

            async def reject_callback(modal_interaction):
                nonlocal reason
                reason = reason.value
                await self.reject_process(modal_interaction, reason)

            modal.add_item(reason)

            modal.callback = reject_callback

            await interaction.response.send_modal(modal)

    @nextcord.ui.button(
        label="–û–¥–æ–±—Ä–∏—Ç—å", style=nextcord.ButtonStyle.green, emoji='‚úÖ', custom_id="role_request:approve"
    )
    async def approve(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        moderator_id = nextcord.utils.parse_raw_mentions(interaction.message.embeds[0].fields[-1].value)[0]
        if moderator_id != interaction.user.id:
            return await interaction.send("–ó–∞–ø—Ä–æ—Å–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.", ephemeral=True)
        self.stop()

        await interaction.response.defer()

        embed = interaction.message.embeds[0]
        embed.colour = nextcord.Colour.dark_green()
        embed.title = "üìó –û–¥–æ–±—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–æ–ª—å"

        request = await RoleRequest.from_message(interaction.message)
        user, guild = RoleRequest.parse_info(interaction.message)
        await interaction.edit_original_message(embed=embed, view=None)
        if request:
            await request.approve(user_text(interaction.user))
        await self.roles_handler.remove_request(user, guild, moderator_id, True)


class StartView(nextcord.ui.View):
    def __init__(self, roles_handler):
        super().__init__(timeout=None)
        self.roles_handler = roles_handler

    @nextcord.ui.button(
        label="–í–∑—è—Ç—å –∑–∞–ø—Ä–æ—Å", style=nextcord.ButtonStyle.blurple, emoji="üìò", custom_id="role_request:take"
    )
    async def take_request(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        self.stop()
        embed = interaction.message.embeds[0]
        embed.title = 'üìô –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'
        embed.colour = nextcord.Colour.orange()
        embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=user_visual(interaction.user), inline=True)
        await interaction.message.edit(view=ReviewView(self.roles_handler), embed=embed)
        await interaction.response.defer()


class RoleRequest:
    def __init__(self, user: nextcord.Member, guild, nickname, rang, role_info_, statistics, statistics_hassle=None):
        self.user = user
        self.guild = guild
        self.nickname = nickname
        self.rang = rang
        self.role_info = role_info_
        self.statistics = statistics
        self.statistics_hassle = statistics_hassle

    @staticmethod
    async def from_message(message: nextcord.Message):
        embed = message.embeds[0]
        nickname = embed.fields[0].value
        role = find_role(message.guild.get_role(nextcord.utils.parse_raw_role_mentions(embed.fields[1].value)[0]).name)
        rang = int(embed.fields[2].value.split(" ")[0])
        try:
            user = await message.guild.fetch_member(nextcord.utils.parse_raw_mentions(embed.fields[3].value)[0])
        except:
            return None
        return RoleRequest(user, message.guild, nickname, rang, role, None)

    @staticmethod
    def parse_info(message: nextcord.Message):
        embed = message.embeds[0]
        user = nextcord.utils.parse_raw_mentions(embed.fields[3].value)[0]
        return nextcord.Object(user), message.guild

    @property
    def in_organization(self):
        for key, value in role_info.items():
            if role := value.find(self.user.roles):
                return role
        return

    @property
    def already_roled(self):
        if self.role_info.find(self.user.roles):
            return True

    @property
    def roles_channel(self):
        return [c for c in self.guild.channels if c.name in '–∑–∞—è–≤–∫–∏-–Ω–∞-—Ä–æ–ª–∏'][0]

    @property
    def check_embed(self):
        embed = nextcord.Embed(
            title='üìò –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å',
            color=nextcord.Color.dark_blue(),
        )
        embed.add_field(name='–ù–∏–∫–Ω–µ–π–º', value=self.nickname, inline=True)
        embed.add_field(name='–†–æ–ª—å', value=self.role_info.find(self.guild.roles).mention, inline=True)
        embed.add_field(name='–†–∞–Ω–≥', value=f'{self.rang} [{self.role_info.rang_name(self.rang)}]', inline=True)
        embed.add_field(name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value=user_visual(self.user), inline=True)
        embed.set_thumbnail(self.user.display_avatar.url)
        return embed

    @property
    def files(self):
        return [self.statistics, self.statistics_hassle] if self.statistics_hassle else [self.statistics]

    @property
    def must_nick(self):
        tag = f'[{self.role_info.tag.format(self.rang)}] '
        tag = tag + self.nickname.replace("_", " ")
        return tag if len(tag) <= 32 else tag[:30] + '‚Ä¶'

    async def send(self, roles_handler):
        await self.roles_channel.send(embed=self.check_embed, files=self.files, view=StartView(roles_handler))

    async def approve(self, moderator):
        await self.user.add_roles(self.role_info.find(self.guild.roles))
        await self.user.edit(nick=self.must_nick)

        embed = nextcord.Embed(title="üìó –í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å –æ–¥–æ–±—Ä–µ–Ω–æ.", colour=nextcord.Colour.dark_red())
        embed.set_author(name=self.guild.name, icon_url=self.guild.icon.url)
        embed.add_field(name='üßë‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value=moderator, inline=False)
        await send_embed(self.user, embed)

    async def reject(self, emoji, reason, moderator):
        embed = nextcord.Embed(title="üìï –í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å –æ—Ç–∫–∞–∑–∞–Ω–æ.", colour=nextcord.Colour.dark_red())
        embed.set_author(name=self.guild.name, icon_url=self.guild.icon.url)
        embed.add_field(name=f'{emoji} –ü—Ä–∏—á–∏–Ω–∞', value=reason)
        embed.add_field(name='üßë‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value=moderator, inline=False)
        await send_embed(self.user, embed)
