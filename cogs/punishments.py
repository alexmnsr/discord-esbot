import datetime

import nextcord
from nextcord.ext import commands

from utils.button_state.views.Punishments import CancelPunishments, PunishmentApprove, MuteModal
from utils.classes.actions import ActionType, human_actions, payload_types
from utils.classes.bot import EsBot
from utils.neccessary import string_to_seconds, checking_presence, restricted_command, print_user, \
    beautify_seconds, copy_message, grant_level


class Punishments(commands.Cog):
    def __init__(self, bot: EsBot) -> None:
        self.bot = bot
        self.handler = bot.db.punishments_handler
        self.client = self.handler.client
        self.handler_buttons = bot.db.state_buttons

    @commands.Cog.listener()
    async def on_ready(self):
        await checking_presence(self.bot)
        await self.handler.reload()

    @commands.Cog.listener()
    async def on_member_join(self, member):
        mutes = await self.handler.mutes.user_muted(member.id, member.guild.id)

        async def give_role(role_name, action_id):
            await member.add_roles(nextcord.utils.get(member.guild.roles, name=role_name),
                                   reason=f'Rejoin. Action ID: {action_id}')

        for mute in mutes:
            if mute['type'] == 'full':
                await give_role('Mute ¬ª Text', mute['_id'])
                await give_role('Mute ¬ª Voice', mute['_id'])
            elif mute['type'] == 'text':
                await give_role('Mute ¬ª Text', mute['_id'])
            elif mute['type'] == 'voice':
                await give_role('Mute ¬ª Voice', mute['_id'])

    @nextcord.slash_command(name='tmute', description='–í—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç (–î–æ –≤—ã—è—Å–Ω–µ–Ω–∏–π)')
    @restricted_command(1)
    async def temp_mute(self, interaction: nextcord.Interaction,
                        user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                         description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç.',
                                                         required=True),
                        duration: str = nextcord.SlashOption('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                                             description='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞. –ü—Ä–∏–º–µ—Ä: 10–º - 10 –º–∏–Ω—É—Ç, 5–¥ - 5 –¥–Ω–µ–π. –ü—Ä–æ—Å—Ç–æ 10 - 10 –º–∏–Ω—É—Ç.',
                                                             required=True),
                        reason: str = nextcord.SlashOption('–ø—Ä–∏—á–∏–Ω–∞', description='–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞.', required=True)):
        await self.handler.mutes.give_temp_mute(user,
                                                interaction.guild.id,
                                                interaction.user,
                                                reason,
                                                string_to_seconds(duration))
        embed = nextcord.Embed(
            title=f'–í—ã –≤—ã–¥–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç.',
            description=f'–ü—Ä–∏—á–∏–Ω–∞: {reason} (–î–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)\n–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: <t:{int((datetime.datetime.now() + datetime.timedelta(seconds=string_to_seconds(duration))).timestamp())}:R>\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {interaction.user.mention}',
            color=0xFF0000
        )
        embed.set_author(name=interaction.guild.name, icon_url=interaction.guild.icon.url)
        await interaction.send(embed=embed)

    @nextcord.slash_command(name='bchannel')
    @restricted_command(2)
    async def block_channel(self, interaction,
                            user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                             description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                             required=True),
                            duration: str = nextcord.SlashOption('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                                                 description='–í—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤',
                                                                 required=True),
                            reason: str = nextcord.SlashOption('–ø—Ä–∏—á–∏–Ω–∞',
                                                               description='–ü—Ä–∏—á–∏–Ω–∞',
                                                               required=True),
                            category: str = nextcord.SlashOption('–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                                                                 description='–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
                                                                 choices=["–°–≤—è–∑—å —Å Discord‚Ñ¢", "–°–≤—è–∑—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"],
                                                                 required=True)):
        if isinstance(user, str) and not (user := await self.bot.resolve_user(user, interaction.guild)):
            return await interaction.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral=True)
        seconds = string_to_seconds(duration)
        if not seconds:
            return await interaction.send('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—É—Ç–∞.')
        category = await self.handler.block.find_categories(interaction.guild, category_name=category)
        if category is None:
            return await interaction.send('–ù–µ –Ω–∞—à–µ–ª –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', ephemeral=True)
        await self.handler.block.give_block_channel(interaction, user, interaction.guild, seconds, reason, category)

    @nextcord.slash_command(name='mute')
    @restricted_command(1)
    async def mute_group(self, interaction):
        ...

    async def give_mute(self, interaction, user, duration, reason, role_name, *, message: nextcord.Message = None,
                        message_len: int = None):
        if isinstance(user, str) and not (user := await self.bot.resolve_user(user, interaction.guild)):
            return await interaction.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral=True)
        await interaction.response.defer()
        mute_seconds = string_to_seconds(duration)
        if not mute_seconds:
            return await interaction.send('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—É—Ç–∞.')
        get, give, remove = self.handler.mutes.mute_info(role_name)
        if await get(user_id=user.id, guild_id=interaction.guild.id):
            return await interaction.send('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –º—É—Ç.')
        embed = ((nextcord.Embed(title='–í—ã–¥–∞—á–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è', color=nextcord.Color.red())
                  .set_author(name=user.display_name, icon_url=user.display_avatar.url))
                 .add_field(name='–ù–∞—Ä—É—à–∏—Ç–µ–ª—å', value=user.mention)
                 .add_field(name='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value=interaction.user.display_name)
                 .add_field(name='–ü—Ä–∏—á–∏–Ω–∞', value=reason)
                 .add_field(name='–í—Ä–µ–º—è', value=beautify_seconds(mute_seconds))
                 .set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else user.display_avatar.url))
        if message:
            channel = [c for c in interaction.guild.text_channels if '–≤—ã–¥–∞—á–∞-–Ω–∞–∫–∞–∑–∞–Ω–∏–π' in c.name][0]
            await interaction.send(embed=embed, ephemeral=True)
            if isinstance(message, nextcord.Message):
                mess = await channel.send(embed=embed, view=CancelPunishments(moderator_id=interaction.user.id,
                                                                              user_id=user.id, role_name=role_name))
                thread = await mess.create_thread(name='üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —á–∞—Ç–∞', auto_archive_duration=60)
                jump_url = mess.jump_url
            else:
                mess = await channel.send(embed=embed,
                                          view=CancelPunishments(moderator_id=interaction.user.id,
                                                                 user_id=user.id, role_name=role_name))
                jump_url = mess.jump_url
        else:
            mess = await interaction.send(embed=embed,
                                          view=CancelPunishments(moderator_id=interaction.user.id,
                                                                 user_id=user.id, role_name=role_name))
            jump_url = mess.jump_url

        params = {
            'moderator_id': interaction.user.id,
            'user_id': user.id,
            'role_name': role_name
        }
        await self.bot.buttons.add_button("Punishments", message_id=mess.id,
                                          channel_id=mess.channel.id,
                                          user_request=interaction.user.id,
                                          moderator_id=interaction.user.id,
                                          guild_id=interaction.guild.id,
                                          class_method='CancelPunishments',
                                          params=params)
        await self.handler.mutes.give_mute(role_name, user=user, guild=interaction.guild,
                                           moderator=interaction.user,
                                           reason=reason,
                                           duration=mute_seconds, jump_url=jump_url)
        if isinstance(message, nextcord.Message):
            await copy_message(message, channel, thread, mess, message_len)

    @mute_group.subcommand(name='text', description="–í—ã–¥–∞—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.")
    async def mute_text(self, interaction,
                        user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                         description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –º—É—Ç.',
                                                         required=True),
                        duration: str = nextcord.SlashOption('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                                             description='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞. –ü—Ä–∏–º–µ—Ä: 10–º - 10 –º–∏–Ω—É—Ç, '
                                                                         '5–¥ - 5 –¥–Ω–µ–π. –ü—Ä–æ—Å—Ç–æ 10 - 10 –º–∏–Ω—É—Ç.',
                                                             required=True),
                        reason: str = nextcord.SlashOption('–ø—Ä–∏—á–∏–Ω–∞', description='–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞.', required=True)):
        await self.give_mute(interaction, user, duration, reason, 'Mute ¬ª Text')

    @nextcord.message_command(name='–í—ã–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º—É—Ç', force_global=True)
    @restricted_command(1)
    async def mute_text_on_message(self, interaction: nextcord.Interaction, message: nextcord.Message):
        modal = MuteModal(self, message.author, message)
        await interaction.response.send_modal(modal)

    @nextcord.user_command(name='–í—ã–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –º—É—Ç')
    @restricted_command(1)
    async def mute_voice_on_message(self, interaction: nextcord.Interaction, user: nextcord.Member):
        modal = MuteModal(self, user, None)
        await interaction.response.send_modal(modal)

    @mute_group.subcommand(name='voice', description="–í—ã–¥–∞—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.")
    async def mute_voice(self, interaction,
                         user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                          description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –º—É—Ç.',
                                                          required=True),
                         duration: str = nextcord.SlashOption('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                                              description='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞. –ü—Ä–∏–º–µ—Ä: 10–º - 10 –º–∏–Ω—É—Ç, 5–¥ - 5 –¥–Ω–µ–π. –ü—Ä–æ—Å—Ç–æ 10 - 10 –º–∏–Ω—É—Ç.',
                                                              required=True),
                         reason: str = nextcord.SlashOption('–ø—Ä–∏—á–∏–Ω–∞', description='–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞.', required=True)):
        await self.give_mute(interaction, user, duration, reason, 'Mute ¬ª Voice')

    @mute_group.subcommand(name='full', description="–í—ã–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    @restricted_command(1)
    async def mute_full(
            self,
            interaction,
            user: str = nextcord.SlashOption(
                '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –º—É—Ç.',
                required=True
            ),
            duration: str = nextcord.SlashOption(
                '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                description='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞. –ü—Ä–∏–º–µ—Ä: 10–º - 10 –º–∏–Ω—É—Ç, 5–¥ - 5 –¥–Ω–µ–π. –ü—Ä–æ—Å—Ç–æ 10 - 10 –º–∏–Ω—É—Ç.',
                required=True
            ),
            reason: str = nextcord.SlashOption('–ø—Ä–∏—á–∏–Ω–∞', description='–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞.', required=True)):
        await self.give_mute(interaction, user, duration, reason, 'Mute ¬ª Full')

    @nextcord.slash_command(name='unmute', description="–°–Ω—è—Ç—å –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    @restricted_command(1)
    async def unmute(self, interaction):
        ...

    async def remove_mute(self, interaction, user, role_name):
        if not (user := await self.bot.resolve_user(user)):
            return await interaction.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral=True)

        if not await self.handler.mutes.remove_mute(user.id, interaction.guild, role_name,
                                                    moderator=interaction.user):
            return await interaction.send('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –º—É—Ç–∞.', ephemeral=True)

        embed = nextcord.Embed(
            title='–°–Ω—è—Ç–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è',
            description=f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} —Å–Ω—è—Ç –º—É—Ç.')
        await interaction.send(embed=embed, ephemeral=True)

    @unmute.subcommand(name='text', description="–°–Ω—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    async def unmute_text(self, interaction,
                          user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                           description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –º—É—Ç.',
                                                           required=True)):
        await self.remove_mute(interaction, user, 'Mute ¬ª Text')

    @unmute.subcommand(name='voice', description="–°–Ω—è—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    async def unmute_voice(self, interaction,
                           user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                            description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –º—É—Ç.',
                                                            required=True)):
        await self.remove_mute(interaction, user, 'Mute ¬ª Voice')

    @unmute.subcommand(name='full', description="–°–Ω—è—Ç—å –ø–æ–ª–Ω—ã–π –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    async def unmute_full(self, interaction,
                          user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                           description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –º—É—Ç.',
                                                           required=True)):
        await self.remove_mute(interaction, user, 'Mute ¬ª Full')

    @nextcord.slash_command(name='warn', description="–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @restricted_command(1)
    async def warn(self, interaction: nextcord.Interaction,
                   user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                    description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                    required=True),
                   reason: str = nextcord.SlashOption('–ø—Ä–∏—á–∏–Ω–∞',
                                                      description='–ü—Ä–∏—á–∏–Ω–∞',
                                                      required=True)):
        resolved_user = await self.bot.resolve_user(user, interaction.guild)
        if not resolved_user:
            return await interaction.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')

        if isinstance(resolved_user, nextcord.Member) and interaction.user.top_role <= resolved_user.top_role:
            return await interaction.send('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', ephemeral=True)

        count_warns = len(await self.handler.database.get_warns(resolved_user.id, interaction.guild.id)) + 1
        embed = self.handler.warns.create_warn_embed(interaction, resolved_user, count_warns, reason)
        if grant_level(interaction.user.roles, interaction.user) < 2:
            await interaction.send(embed=embed,
                                   view=PunishmentApprove(punishment='warn',
                                                          count_warns=count_warns,
                                                          reason=reason,
                                                          moderator_id=interaction.user.id,
                                                          user_id=resolved_user.id,
                                                          lvl=2))
            message = await interaction.original_message()
            params = {
                'punishment': 'warn',
                'count_warns': count_warns,
                'reason': reason,
                'moderator_id': interaction.user.id,
                'user_id': resolved_user.id,
                'lvl': 2
            }
            await self.bot.buttons.add_button("Punishments", message_id=message.id,
                                              channel_id=interaction.channel_id,
                                              user_request=resolved_user.id,
                                              moderator_id=interaction.user.id,
                                              guild_id=interaction.guild.id,
                                              class_method='PunishmentApprove',
                                              params=params)
        else:
            message = await interaction.send(embed=embed,
                                             view=CancelPunishments(moderator_id=interaction.user.id,
                                                                    user_id=resolved_user.id))
            jump_url = (await message.fetch()).jump_url
            await self.handler.warns.apply_warn(interaction, resolved_user, count_warns, reason, embed,
                                                moderator_id=interaction.user.id, jump_url=jump_url)

    @nextcord.slash_command(name='unwarn', description="–°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @restricted_command(2)
    async def unwarn(self, interaction,
                     user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                      description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.',
                                                      required=True),
                     action_id: int = nextcord.SlashOption('action_id', description='Action ID –Ω–∞–∫–∞–∑–∞–Ω–∏—è',
                                                           required=True)):
        if not (user := await self.bot.resolve_user(user)):
            return await interaction.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        if not (warn_data := await self.handler.database.get_warn(user_id=user.id, guild_id=interaction.guild.id,
                                                                  action_id=action_id)):
            return await interaction.send('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        embed = self.handler.warns.create_unwarn_embed(interaction, user, warn_data)
        await interaction.send(embed=embed)
        await self.handler.database.remove_warn(user_id=user.id, guild_id=interaction.guild.id,
                                                moderator_id=interaction.user.id, action_id=action_id)

    @nextcord.slash_command(name='ban', description="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    @restricted_command(1)
    async def ban(self, interaction: nextcord.Interaction,
                  user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                   description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                   required=True),
                  duration: str = nextcord.SlashOption('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                                       description='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. 5 = 5 –¥–Ω–µ–π',
                                                       required=True),
                  reason: str = nextcord.SlashOption('–ø—Ä–∏—á–∏–Ω–∞',
                                                     description='–ü—Ä–∏—á–∏–Ω–∞',
                                                     required=True)):
        resolved_user = await self.bot.resolve_user(user, interaction.guild)
        if not resolved_user:
            return await interaction.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')

        if isinstance(resolved_user, nextcord.Member) and interaction.user.top_role <= resolved_user.top_role:
            return await interaction.send('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', ephemeral=True)

        duration_in_seconds = string_to_seconds(duration, 'd')
        if duration_in_seconds is None:
            return await interaction.send('–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.')

        ban = await self.handler.database.get_ban(user_id=user, guild_id=interaction.guild.id)

        if ban:
            return await interaction.send('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.', ephemeral=True)

        embed = self.handler.bans.create_ban_embed(interaction, resolved_user, duration_in_seconds, reason)
        if grant_level(interaction.user.roles, interaction.user) <= 3:
            await interaction.send(embed=embed, view=PunishmentApprove(punishment='ban', reason=reason,
                                                                       moderator_id=interaction.user.id,
                                                                       user_id=resolved_user.id,
                                                                       lvl=3, duration=duration_in_seconds))
            message = await interaction.original_message()
            params = {
                'punishment': 'ban',
                'reason': reason,
                'moderator_id': interaction.user.id,
                'user_id': resolved_user.id,
                'lvl': 3,
                'duration': duration_in_seconds
            }
            await self.bot.buttons.add_button("Punishments", message_id=message.id,
                                              channel_id=interaction.channel_id,
                                              user_request=resolved_user.id,
                                              moderator_id=interaction.user.id,
                                              guild_id=interaction.guild.id,
                                              class_method='PunishmentApprove',
                                              params=params)
        else:
            message = await interaction.send(embed=embed)
            jump_url = (await message.fetch()).jump_url
            await self.handler.bans.apply_ban(interaction, resolved_user, duration_in_seconds, reason, embed,
                                              moderator_id=interaction.user.id, jump_url=jump_url)

    @nextcord.slash_command(name='unban', description="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @restricted_command(3)
    async def unban(self, interaction,
                    user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                     description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.',
                                                     required=True)):
        if not (user := await self.bot.resolve_user(user)):
            return await interaction.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')

        ban = await self.handler.database.get_ban(user_id=user.id, guild_id=interaction.guild.id)
        if ban:
            await self.handler.database.remove_ban(user_id=user.id, guild_id=interaction.guild.id,
                                                   moderator_id=interaction.user.id)
        else:
            return await interaction.send('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', ephemeral=True)

        await interaction.guild.unban(user, reason=f"Action ID –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {ban['_id']}")

        embed = ((nextcord.Embed(title='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', color=nextcord.Color.red())
                  .set_author(name=user.display_name, icon_url=user.display_avatar.url))
                 .add_field(name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value=f'<@{user.id}>', inline=False)
                 .add_field(name='–ë–ª–æ–∫–∏—Ä–æ–≤–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä', value=f'<@{ban["moderator_id"]}>')
                 .add_field(name='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª:', value=f'<@{interaction.user.id}>')
                 .set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else user.display_avatar.url)
                 .set_footer(text=f"Action ID: {ban['_id']}"))
        return await interaction.send(embed=embed)

    @nextcord.slash_command(name='gban', description="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö",
                            default_member_permissions=nextcord.Permissions(administrator=True))
    @restricted_command(5)
    async def gban(self, interaction,
                   user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                    description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.',
                                                    required=True),
                   duration: str = nextcord.SlashOption('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                                        description='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: 5 = 5 –¥–Ω–µ–π. -1 = –Ω–∞–≤—Å–µ–≥–¥–∞.',
                                                        required=True),
                   reason: str = nextcord.SlashOption('–ø—Ä–∏—á–∏–Ω–∞', description='–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.', required=True)):

        if not (user := await self.bot.resolve_user(user)):
            return await interaction.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')

        embed = ((nextcord.Embed(title='–í—ã–¥–∞—á–∞ –±–∞–Ω–∞ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö', color=nextcord.Color.red())
                  .set_author(name=user.display_name, icon_url=user.display_avatar.url))
                 .add_field(name='–ù–∞—Ä—É—à–∏—Ç–µ–ª—å', value=f'<@{user.id}>')
                 .add_field(name='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value=f'{duration} –¥–Ω–µ–π' if duration != -1 else '–ù–∞–≤—Å–µ–≥–¥–∞')
                 .add_field(name='–ü—Ä–∏—á–∏–Ω–∞', value=reason)
                 .set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else user.display_avatar.url)
                 .set_footer(text=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {interaction.user.id}"))
        mess = await interaction.send(embed=embed)
        jump_url = (await mess.fetch()).jump_url
        await self.handler.bans.give_ban(ActionType.BAN_GLOBAL, user_id=user, guild=interaction.guild.id,
                                         moderator=interaction.user.id, reason=reason, duration=duration,
                                         jump_url=jump_url)

    @nextcord.slash_command(name='act', description="–ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ ID")
    @restricted_command(1)
    async def act(self, interaction,
                  action_id: str = nextcord.SlashOption('id', description='Action ID —Å–æ–±—ã—Ç–∏—è')):
        data = await self.handler.database.actions.get_action(action_id)
        if not data:
            return await interaction.send(f'–¢–∞–∫–æ–≥–æ ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', ephemeral=True)
        user = await self.client.fetch_user(data["moderator_id"])
        embed = ((nextcord.Embed(title=human_actions.get(
            data['action_type'].split('.')[-1].lower() if data['action_type'].startswith('ActionType.') else data[
                'action_type'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ'), color=nextcord.Color.red())
                  .set_author(name=interaction.user.display_name, icon_url=user.display_avatar.url))
                 .set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else user.display_avatar.url)
                 .set_footer(text=f'Action ID: {data["_id"]}'))
        embed.add_field(name='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value=print_user(user))
        embed.add_field(name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value=print_user(await self.client.fetch_user(data['user_id'])))

        for k, v in payload_types.items():
            if k in data['payload']:
                s = data['payload'][k]
                if k == 'duration':
                    s = beautify_seconds(data['payload'][k]) if data['payload'][k] != -1 else '–ù–∞–≤—Å–µ–≥–¥–∞'

                embed.add_field(name=v, value=s)

        return await interaction.send(embed=embed)

    @nextcord.slash_command(name='alist', description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å /alist –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @restricted_command(1)
    async def alist(self, interaction,
                    user: str = nextcord.SlashOption('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                                     description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.',
                                                     required=True),
                    type_punishment: str = nextcord.SlashOption('—Ç–∏–ø', description='–¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è',
                                                                choices=list(human_actions.values()), default='FULL'),
                    server: str = nextcord.SlashOption('—Å–µ—Ä–≤–µ—Ä',
                                                       description='–¢–æ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).',
                                                       choices=['–¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç', '–í—Å–µ'], default='–¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç')):
        if not (user := await self.bot.resolve_user(user)):
            return await interaction.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        if server == '–¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç':
            server = interaction.guild.id
            punishments_list = await self.handler.database.actions.get_punishments(user_id=user.id, guild_id=server,
                                                                                   type_punishment=type_punishment)
        else:
            punishments_list = await self.handler.database.actions.get_punishments(user_id=user.id,
                                                                                   type_punishment=type_punishment)
        punishments_list.reverse()

        if len(punishments_list) == 0:
            return await interaction.send(f'–ù–∞—Ä—É—à–µ–Ω–∏–π —É <@{user.id}> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', ephemeral=True)

        pages = [punishments_list[i:i + 5] for i in range(0, len(punishments_list), 5)]
        current_page = 1

        async def show_page(page_interaction: nextcord.Interaction, page_num: int, is_create: bool = True):
            embed = nextcord.Embed(title=f'üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.display_name}',
                                   color=nextcord.Colour.dark_blue())

            for items in pages[page_num - 1]:
                reason = items['payload'].get('reason', None)
                duration = items['payload'].get('duration', None)
                jump_url = items['payload'].get('jump_url', None)
                if server == '–í—Å–µ':
                    if items['guild_id'] == 690955874008694905:
                        continue
                    guild = await self.bot.fetch_guild(items['guild_id'])
                    server_info = f'–°–µ—Ä–≤–µ—Ä: {guild.name}\n'
                else:
                    server_info = ''
                embed.add_field(
                    name=f'{items["_id"]}: {human_actions.get(items["action_type"].split(".")[-1].lower() if items["action_type"].startswith("ActionType.") else items["action_type"], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")}',
                    value=f'{server_info}–í—Ä–µ–º—è: {items["time"].strftime("%d.%m.%Y %H:%M:%S")}.\n'
                          f'–í—ã–¥–∞–ª: <@{items["moderator_id"]}>\n{f"–ü—Ä–∏—á–∏–Ω–∞: **[{reason}]({jump_url})**" if reason else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\n{f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {beautify_seconds(int(duration))}" if duration else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}',
                    inline=False)

            embed.set_footer(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_num} –∏–∑ {len(pages)}')

            view = nextcord.ui.View()
            if page_num > 1:
                button = nextcord.ui.Button(emoji="‚¨ÖÔ∏è")

                async def callback(change_page_interaction):
                    nonlocal page_num
                    await change_page_interaction.response.defer(with_message=False)
                    await show_page(change_page_interaction, page_num - 1)

                button.callback = callback
                view.add_item(button)
            else:
                view.add_item(nextcord.ui.Button(emoji='‚¨ÖÔ∏è', disabled=True))
            if page_num < len(pages):
                button = nextcord.ui.Button(emoji="‚û°Ô∏è")

                async def callback(start_page_interaction):
                    nonlocal page_num
                    await start_page_interaction.response.defer(with_message=False)
                    await show_page(start_page_interaction, page_num + 1)

                button.callback = callback
                view.add_item(button)
            else:
                view.add_item(nextcord.ui.Button(emoji='‚û°Ô∏è', disabled=True))

            if not is_create:
                await page_interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            else:
                await page_interaction.edit_original_message(embed=embed, view=view)

        await show_page(interaction, current_page, is_create=False)


def setup(bot: EsBot) -> None:
    bot.add_cog(Punishments(bot))
