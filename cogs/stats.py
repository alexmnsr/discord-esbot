import datetime

import nextcord
from nextcord.ext import commands

from utils.classes.actions import human_actions, moder_actions
from utils.classes.bot import EsBot
from utils.neccessary import restricted_command, is_date_valid, date_autocomplete, grant_level


def embed_to_string(embed: nextcord.Embed) -> str:
    result = [f"{embed.title}\n"]
    for field in embed.fields:
        result.append(f"{field.name}\n{field.value}\n")
    return "\n".join(result)


class Stats(commands.Cog):
    def __init__(self, bot: EsBot) -> None:
        self.bot = bot
        self.handler = bot.db.online_handler
        self.acts_handler = bot.db.actions

    @nextcord.slash_command(name='stats', description='–ü–æ–∫–∞–∑–∞—Ç—å –æ–Ω–ª–∞–π–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤', dm_permission=False)
    @restricted_command(1)
    async def stats(self, interaction: nextcord.Interaction,
                    date: str = nextcord.SlashOption('–¥–∞—Ç–∞', description="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.YYYY", required=False,
                                                     autocomplete_callback=date_autocomplete),
                    period: str = nextcord.SlashOption('–ø–µ—Ä–∏–æ–¥', description="–ü–µ—Ä–∏–æ–¥ (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü)",
                                                       required=False,
                                                       choices=["–¥–µ–Ω—å", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü"]),
                    month: str = nextcord.SlashOption('–º–µ—Å—è—Ü', description="–ú–µ—Å—è—Ü", required=False,
                                                      choices=["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                                                               "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å",
                                                               "–î–µ–∫–∞–±—Ä—å"])):
        try:
            if not date:
                date = datetime.datetime.now().strftime('%d.%m.%Y')
            elif not is_date_valid(date):
                return await interaction.send('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –§–æ—Ä–º–∞—Ç: dd.mm.YYYY.\n'
                                              '–ü—Ä–∏–º–µ—Ä: 07.07.2077', ephemeral=True)

            if not period:
                period = "–¥–µ–Ω—å"

            date_obj = datetime.datetime.strptime(date, '%d.%m.%Y')

            if period == "–Ω–µ–¥–µ–ª—è":
                start_date = date_obj - datetime.timedelta(days=date_obj.weekday())
                end_date = start_date + datetime.timedelta(days=6)
            elif period == "–º–µ—Å—è—Ü":
                if month:
                    month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                                   "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
                    month_index = month_names.index(month) + 1
                    start_date = date_obj.replace(month=month_index, day=1)
                else:
                    start_date = date_obj.replace(day=1)
                end_date = (start_date + datetime.timedelta(days=31)).replace(day=1) - datetime.timedelta(days=1)
            else:
                start_date = date_obj
                end_date = date_obj

            guild = interaction.guild
            if guild:
                moderator_roles = [role for role in guild.roles if '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä'.lower() in role.name.lower()]
                if moderator_roles:
                    moderator_users = []
                    if grant_level(interaction.user.roles, interaction.user) < 4:
                        moderator_users.append(interaction.user.id)
                        embed = nextcord.Embed(
                            title=f'üíé –î–µ–π—Å—Ç–≤–∏—è –∑–∞ {start_date.strftime("%d.%m.%Y")} - {end_date.strftime("%d.%m.%Y")}',
                            color=nextcord.Color.dark_purple())
                    else:
                        embed = nextcord.Embed(
                            title=f'üíé –î–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ {start_date.strftime("%d.%m.%Y")} - {end_date.strftime("%d.%m.%Y")}',
                            color=nextcord.Color.dark_purple())
                        for member in guild.members:
                            for role in member.roles:
                                if role in moderator_roles:
                                    moderator_users.append(member.id)
                                    break

                    await interaction.response.defer()

                    for id_moderator in moderator_users:
                        total_online = datetime.timedelta()
                        acts_summary = {}

                        current_date = start_date
                        while current_date <= end_date:
                            info = await self.handler.get_info(True, user_id=id_moderator,
                                                               guild_id=interaction.guild.id,
                                                               date=current_date.strftime('%d.%m.%Y'))
                            total_online += datetime.timedelta(hours=int(info.total_time.split(':')[0]),
                                                               minutes=int(info.total_time.split(':')[1]),
                                                               seconds=int(info.total_time.split(':')[2]))

                            punishments = await self.acts_handler.moderator_actions(current_date, id_moderator,
                                                                                    guild.id)
                            for p in punishments:
                                acts_summary[p['action_type']] = acts_summary.get(p['action_type'], 0) + 1

                            current_date += datetime.timedelta(days=1)

                        member = guild.get_member(id_moderator)
                        embed.add_field(name=f'{member.display_name}',
                                        value=(f'‚ñ´Ô∏è –û–Ω–ª–∞–π–Ω: {str(total_online)}\n' +
                                               (f'‚ñ´Ô∏è –î–µ–π—Å—Ç–≤–∏—è:\n' +
                                                '\n'.join([
                                                    f'‚†Ä‚†Ä‚†Ä {moder_actions.get(k.split(".")[-1].lower() if k.startswith("ActionType.") else k, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")}: {v}'
                                                    for k, v in
                                                    acts_summary.items()]) if acts_summary else '‚ñ´Ô∏è –ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π')),
                                        inline=False)
                    await interaction.followup.send(embed=embed)

        except Exception as e:
            print(f"Error in stats command: {e}")
            await interaction.followup.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", ephemeral=True)


def setup(bot: EsBot) -> None:
    bot.add_cog(Stats(bot))
